#include <iostream>
using namespace std;

// Node structure for AVL Tree
struct Node {
    int data;
    Node* left;
    Node* right;
    int height;
    Node(int val) : data(val), left(nullptr), right(nullptr), height(1) {}
};

// AVL Tree ADT
class AVL {
private:
    Node* root;

    // Utility: Get height
    int getHeight(Node* n) {
        return (n == nullptr) ? 0 : n->height;
    }

    // Utility: Get balance factor
    int getBalance(Node* n) {
        return (n == nullptr) ? 0 : getHeight(n->left) - getHeight(n->right);
    }

    // Right rotation (LL case)
    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        // Perform rotation
        x->right = y;
        y->left = T2;

        // Update heights
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

        return x; // new root
    }

    // Left rotation (RR case)
    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        // Perform rotation
        y->left = x;
        x->right = T2;

        // Update heights
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y; // new root
    }

    // Insert node recursively
    Node* insert(Node* node, int key) {
        // Normal BST insertion
        if (node == nullptr) return new Node(key);

        if (key < node->data)
            node->left = insert(node->left, key);
        else if (key > node->data)
            node->right = insert(node->right, key);
        else
            return node; // duplicate not allowed

        // Update height
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));

        // Check balance
        int balance = getBalance(node);

        // Balancing cases
        // Left Left (LL)
        if (balance > 1 && key < node->left->data)
            return rightRotate(node);

        // Right Right (RR)
        if (balance < -1 && key > node->right->data)
            return leftRotate(node);

        // Left Right (LR)
        if (balance > 1 && key > node->left->data) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        // Right Left (RL)
        if (balance < -1 && key < node->right->data) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node; // unchanged
    }

    // Search node recursively
    Node* search(Node* node, int key) {
        if (node == nullptr || node->data == key)
            return node;
        if (key < node->data)
            return search(node->left, key);
        else
            return search(node->right, key);
    }

    // Inorder traversal
    void inorder(Node* node) {
        if (node != nullptr) {
            inorder(node->left);
            cout << node->data << " ";
            inorder(node->right);
        }
    }

public:
    // Constructor
    AVL() : root(nullptr) {}

    // Insert wrapper
    void insert(int key) {
        root = insert(root, key);
    }

    // Search wrapper
    Node* search(int key) {
        return search(root, key);
    }

    // Display inorder traversal
    void displayInorder() {
        cout << "Inorder traversal: ";
        inorder(root);
        cout << endl;
    }
};

// Main function
int main() {
    AVL avl;

    // Insert elements
    avl.insert(10);
    avl.insert(20);
    avl.insert(30);
    avl.insert(40);
    avl.insert(50);
    avl.insert(25);

    avl.displayInorder();  // Balanced inorder

    // Search
    int key = 25;
    if (avl.search(key))
        cout << "Element " << key << " found in AVL Tree\n";
    else
        cout << "Element " << key << " not found!\n";

    key = 15;
    if (avl.search(key))
        cout << "Element " << key << " found in AVL Tree\n";
    else
        cout << "Element " << key << " not found!\n";

    return 0;
}
