#include <iostream>
using namespace std;

// Node structure for singly linked list
struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

// Singly Linked List ADT
class SinglyLinkedList {
private:
    Node* head;

public:
    // Constructor
    SinglyLinkedList() {
        head = nullptr;
    }

    // Insert at the beginning
    void insertAtBeginning(int x) {
        Node* newNode = new Node(x);
        newNode->next = head;
        head = newNode;
    }

    // Insert at ith position (1-based index)
    void insertAtPosition(int x, int pos) {
        if (pos < 1) {
            cout << "Invalid position!\n";
            return;
        }

        Node* newNode = new Node(x);

        if (pos == 1) { // Insert at beginning
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        for (int i = 1; temp != nullptr && i < pos - 1; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range!\n";
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Remove from beginning
    void removeFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty!\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    // Remove from ith position
    void removeFromPosition(int pos) {
        if (pos < 1 || head == nullptr) {
            cout << "Invalid operation!\n";
            return;
        }

        if (pos == 1) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        for (int i = 1; temp != nullptr && i < pos - 1; i++) {
            temp = temp->next;
        }

        if (temp == nullptr || temp->next == nullptr) {
            cout << "Position out of range!\n";
            return;
        }

        Node* delNode = temp->next;
        temp->next = delNode->next;
        delete delNode;
    }

    // Search for an element, return pointer to node if found
    Node* search(int x) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == x)
                return temp; // return pointer to node
            temp = temp->next;
        }
        return nullptr; // not found
    }

    // Display list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

// Main function
int main() {
    SinglyLinkedList list;

    list.insertAtBeginning(10);
    list.insertAtBeginning(20);
    list.insertAtBeginning(30);
    cout << "List after insertions at beginning: ";
    list.display();

    list.insertAtPosition(15, 2);
    cout << "List after inserting 15 at position 2: ";
    list.display();

    list.removeFromBeginning();
    cout << "List after removing from beginning: ";
    list.display();

    list.removeFromPosition(2);
    cout << "List after removing from position 2: ";
    list.display();

    Node* found = list.search(15);
    if (found)
        cout << "Element 15 found at node with address: " << found << endl;
    else
        cout << "Element 15 not found!\n";

    return 0;
}
